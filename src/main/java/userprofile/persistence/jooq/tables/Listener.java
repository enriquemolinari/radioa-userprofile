/*
 * This file is generated by jOOQ.
 */
package userprofile.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import userprofile.persistence.jooq.App;
import userprofile.persistence.jooq.Keys;
import userprofile.persistence.jooq.tables.records.ListenerRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Listener extends TableImpl<ListenerRecord> {

    private static final long serialVersionUID = 928799856;

    /**
     * The reference instance of <code>APP.LISTENER</code>
     */
    public static final Listener LISTENER = new Listener();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListenerRecord> getRecordType() {
        return ListenerRecord.class;
    }

    /**
     * The column <code>APP.LISTENER.ID_LISTENER</code>.
     */
    public final TableField<ListenerRecord, Integer> ID_LISTENER = createField(DSL.name("ID_LISTENER"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>APP.LISTENER.NAME</code>.
     */
    public final TableField<ListenerRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>APP.LISTENER.SURNAME</code>.
     */
    public final TableField<ListenerRecord, String> SURNAME = createField(DSL.name("SURNAME"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>APP.LISTENER.PHONE</code>.
     */
    public final TableField<ListenerRecord, String> PHONE = createField(DSL.name("PHONE"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>APP.LISTENER.EMAIL</code>.
     */
    public final TableField<ListenerRecord, String> EMAIL = createField(DSL.name("EMAIL"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>APP.LISTENER.PERSON_ID</code>.
     */
    public final TableField<ListenerRecord, String> PERSON_ID = createField(DSL.name("PERSON_ID"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>APP.LISTENER</code> table reference
     */
    public Listener() {
        this(DSL.name("LISTENER"), null);
    }

    /**
     * Create an aliased <code>APP.LISTENER</code> table reference
     */
    public Listener(String alias) {
        this(DSL.name(alias), LISTENER);
    }

    /**
     * Create an aliased <code>APP.LISTENER</code> table reference
     */
    public Listener(Name alias) {
        this(alias, LISTENER);
    }

    private Listener(Name alias, Table<ListenerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Listener(Name alias, Table<ListenerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Listener(Table<O> child, ForeignKey<O, ListenerRecord> key) {
        super(child, key, LISTENER);
    }

    @Override
    public Schema getSchema() {
        return App.APP;
    }

    @Override
    public Identity<ListenerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LISTENER;
    }

    @Override
    public UniqueKey<ListenerRecord> getPrimaryKey() {
        return Keys.SQL0000000032_D3E50CE9_0172_B50B_E31B_FFFFC60AC551;
    }

    @Override
    public List<UniqueKey<ListenerRecord>> getKeys() {
        return Arrays.<UniqueKey<ListenerRecord>>asList(Keys.SQL0000000032_D3E50CE9_0172_B50B_E31B_FFFFC60AC551);
    }

    @Override
    public Listener as(String alias) {
        return new Listener(DSL.name(alias), this);
    }

    @Override
    public Listener as(Name alias) {
        return new Listener(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Listener rename(String name) {
        return new Listener(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listener rename(Name name) {
        return new Listener(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
